syntax = "proto3";

package kv;

service KVService {
    rpc Get(GetRequest) returns (GetResponse);
    rpc Put(PutRequest) returns (PutResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    rpc Txn(TxnRequest) returns (TxnResponse);
    rpc AcquireLock(LockRequest) returns (LockResponse);
    rpc ReleaseLock(LockRequest) returns (UnlockResponse);
    rpc Status(StatusRequest) returns (StatusResponse);
}

service RaftService {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string value = 1;
}

message PutRequest {
    string key = 1;
    string value = 2;
}

message PutResponse {
    bool success = 1;
}

message DeleteRequest {
    string key = 1;
}

message DeleteResponse {
    bool success = 1;
}

message TxnRequest {
    repeated Operation operations = 1;
}

message TxnResponse {
    bool success = 1;
}

message Compare {
    string key = 1;
    string value = 2;
}

message Operation {
    oneof op {
        PutRequest put = 1;
        DeleteRequest delete = 2;
        Compare compare = 3;
    }
}

message OpResponse {
    bool success = 1;
}

message LockRequest {
    string key = 1;
}

message LockResponse {
    bool success = 1;
}

message UnlockRequest {
    string key = 1;
}

message UnlockResponse {
    bool success = 1;
}

message StatusRequest {}

message StatusResponse {
    repeated string nodes = 1;
}

message RequestVoteRequest {
    string candidateId = 1;
    int32 term = 2;
}

message RequestVoteResponse {
    bool granted = 1;
}

message AppendEntriesRequest {
    string leaderId = 1;
    int32 term = 2;
    repeated LogEntry entries = 3;
}

message AppendEntriesResponse {
    bool success = 1;
}

message LogEntry {
    int32 term = 1;
    string command = 2;
}

message SnapshotChunk {
    bytes data = 1;
}

message InstallSnapshotResponse {
    bool success = 1;
}

enum NodeRole {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
}

enum CompareTarget {
    KEY = 0;
    VALUE = 1;
}

enum CompareResult {
    LESS = 0;
    EQUAL = 1;
    GREATER = 2;
}

enum EntryType {
    COMMAND = 0;
    CONFIGURATION = 1;
}